{"version":3,"sources":["logo.svg","main-hub/main-hub.jsx","main-hub/hooks/use-hooks.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["MainHub","handleNotification","useState","sendNotification","setSendNotification","setInterval","isEqual","Date","Notification","requestPermission","then","onclick","event","preventDefault","window","open","useEffect","console","log","useHooks","Button","variant","onClick","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yMAAe,I,mCCQA,SAASA,IACpB,IACIC,ECPO,WACb,MAAgDC,oBAAS,GAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KAQMH,GANYI,aAAY,WACxBC,YAAQ,IAAIC,KAAQ,IAAIA,KAAK,KAAM,EAAG,GAAI,GAAI,GAAI,MACpDH,GAAoB,KAErB,KAEwB,WACzBI,aAAaC,oBAAoBC,MAAK,WACjB,IAAIF,aACrB,sDAEWG,QAAU,SAAUC,GAC/BA,EAAMC,iBACNC,OAAOC,KAAK,qCAAsC,gBAgBxD,OAXAC,qBAAU,WACJb,IAEAc,QAAQC,IAAI,sBAGdjB,IACAG,GAAoB,MAErB,CAACD,IAEG,CACLF,sBDzBIkB,GADAlB,mBAEJ,OACI,gCACI,0CACA,cAACmB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAASrB,EAArC,uCEHGsB,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAACxB,EAAD,OCKSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCIRO,EAAcC,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DAmCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT7B,MAAK,SAACkC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BjC,QAAQC,IACN,uDAIEsB,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB3B,QAAQC,IAAI,sCAGRsB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAACC,GACNrC,QAAQqC,MAAM,4CAA6CA,MCpFjEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDUnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB/C,OAAOqB,SAAS2B,MACpDC,SAAWjD,OAAOqB,SAAS4B,OAIvC,OAGFjD,OAAOkD,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,GAAN,sBAEP5B,IA4DV,SAAiCM,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CACP,iBAAkB,YAGnBxD,MAAK,SAACyD,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM9D,MAAK,SAACkC,GAClCA,EAAa6B,aAAa/D,MAAK,WAC7BI,OAAOqB,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLpC,QAAQC,IACN,oEArFAyD,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM9D,MAAK,WACjCO,QAAQC,IAAI,8DAIdoB,EAAgBC,EAAOC,OC7B/BE,GACAjB,M","file":"static/js/main.9c34cc91.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\"\r\n\r\n//Material UI Components\r\nimport Button from '@material-ui/core/Button';\r\n\r\n//Hooks\r\nimport useHooks from './hooks/use-hooks.js';\r\n\r\nexport default function MainHub() {\r\n    const {\r\n        handleNotification\r\n    } = useHooks();\r\n    return (\r\n        <div>\r\n            <h1>Arup Hub</h1>\r\n            <Button variant=\"contained\" onClick={handleNotification}>Send me a Notification</Button>\r\n        </div>\r\n    );\r\n}","import { useState, useEffect } from \"react\";\r\nimport { format, isThisSecond, isEqual } from \"date-fns\";\r\n\r\nexport default () => {\r\n  const [sendNotification, setSendNotification] = useState(false);\r\n\r\n  const checkTime = setInterval(() => {\r\n    if (isEqual(new Date(), new Date(2021, 8, 16, 15, 15, 30))) {\r\n      setSendNotification(true);\r\n    }\r\n  }, 1000);\r\n\r\n  const handleNotification = () => {\r\n    Notification.requestPermission().then(() => {\r\n      var notification = new Notification(\r\n        \"You have 3 new fields to update in the BIM Tracker\"\r\n      );\r\n      notification.onclick = function (event) {\r\n        event.preventDefault();\r\n        window.open(\"http://bmtools.arup.com/bimtracker\", \"_blank\");\r\n      };\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sendNotification) {\r\n      const timedNotification = () => {\r\n        console.log(\"timed notification\");\r\n      };\r\n      timedNotification();\r\n      handleNotification();\r\n      setSendNotification(false);\r\n    }\r\n  }, [sendNotification]);\r\n\r\n  return {\r\n    handleNotification,\r\n  };\r\n};\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MainHub from \"./main-hub\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainHub />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\"This web app is being served cache-first by a service \");\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: {\r\n      \"Service-Worker\": \"script\",\r\n    },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\nreportWebVitals();\n"],"sourceRoot":""}