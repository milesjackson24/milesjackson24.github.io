{"version":3,"sources":["logo.svg","my-calcs/hooks/use-hooks.js","my-calcs/my-calcs-styles.js","my-calcs/my-calcs.jsx","main-hub/main-hub-styles.js","main-hub/main-hub.jsx","main-hub/hooks/use-hooks.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["axios","require","userData","useState","myCalcs","setMyCalcs","newCalcs","setNewCalcs","notificationSent","setNotificationSent","getMyCalcs","get","account","userName","then","response","data","calcs","useEffect","checkForCalcs","setInterval","clearInterval","length","Notification","requestPermission","onclick","event","preventDefault","window","open","console","log","completeCalc","calc","ProjectCode","makeStyles","table","width","marginTop","margin","MainHub","props","useHooks","classes","useStyles","TableContainer","component","Paper","className","Table","TableHead","TableCell","TableBody","map","TableRow","calculation","JobNameShort","stage","Button","variant","onClick","calculation_id","loginScreen","sendNotification","setSendNotification","loggedIn","setLoggedIn","setUserData","handleNotification","authHandler","err","clientId","authCallback","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.220a3253.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from \"react\";\r\nconst axios = require(\"axios\");\r\n\r\nexport default (userData) => {\r\n  const [myCalcs, setMyCalcs] = useState([]);\r\n  const [newCalcs, setNewCalcs] = useState([]);\r\n  const [notificationSent, setNotificationSent] = useState(false);\r\n\r\n  const getMyCalcs = () => {\r\n    axios\r\n      .get(\r\n        `https://bmtools.arup.com/calcs/api/mechanical/pwadata/${userData.account.userName}`\r\n      )\r\n      .then(function (response) {\r\n        setMyCalcs(response.data.calcs);\r\n      });\r\n  };\r\n\r\n  const getNewCalcs = () => {\r\n    axios\r\n      .get(\r\n        `https://bmtools.arup.com/calcs/api/mechanical/pwadata/${userData.account.userName}`\r\n      )\r\n      .then(function (response) {\r\n        setNewCalcs(response.data.calcs);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getMyCalcs();\r\n    setNewCalcs(myCalcs);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const checkForCalcs = setInterval(() => {\r\n      getNewCalcs();\r\n      return () => clearInterval(checkForCalcs);\r\n    }, 60000);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (newCalcs.length > myCalcs.length) {\r\n      //Could link to the specific project\r\n      Notification.requestPermission().then(() => {\r\n        var notification = new Notification(\r\n          \"You have a new Calculation to complete\"\r\n        );\r\n        notification.onclick = function (event) {\r\n          event.preventDefault();\r\n          window.open(\r\n            \"https://bmtools.arup.com/calcs/mechanical/mycalcs\",\r\n            \"_blank\"\r\n          );\r\n        };\r\n      });\r\n    } else if (newCalcs.length < myCalcs.length) {\r\n      //Could display how many more to go\r\n      Notification.requestPermission().then(() => {\r\n        new Notification(\r\n          `Well done! You've completed a Calculation, only ${newCalcs.length} more to go.`\r\n        );\r\n      });\r\n    }\r\n    console.log(newCalcs, myCalcs);\r\n    setNotificationSent(true);\r\n  }, [newCalcs]);\r\n\r\n  useEffect(() => {\r\n    if (notificationSent === true) {\r\n      getMyCalcs();\r\n      setNotificationSent(false);\r\n    }\r\n    console.log(myCalcs, newCalcs);\r\n  }, [notificationSent]);\r\n\r\n  const completeCalc = (calc) => {\r\n    window.open(\r\n      `https://bmtools.arup.com/calcs/mechanical/project/${calc.ProjectCode}`,\r\n      \"_blank\"\r\n    );\r\n  };\r\n\r\n  return {\r\n    myCalcs,\r\n    completeCalc,\r\n  };\r\n};\r\n","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport default makeStyles({\r\n  table: {\r\n    width: 900,\r\n    marginTop: 50,\r\n    margin: \"auto\",\r\n  },\r\n});\r\n","import React from \"react\"\r\n\r\n//Material UI Components\r\nimport Button from '@material-ui/core/Button';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n//Hooks\r\nimport useHooks from './hooks/use-hooks.js';\r\n\r\n//Styles\r\nimport useStyles from './my-calcs-styles.js'\r\n\r\nexport default function MainHub(props) {\r\n    const {\r\n        userData\r\n    }= props;\r\n    const {\r\n        myCalcs,\r\n        completeCalc\r\n    } = useHooks(userData);\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper} className={classes.table}>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableCell>Calculation Name</TableCell>\r\n                        <TableCell>Project Name</TableCell>\r\n                        <TableCell>Project Number</TableCell>\r\n                        <TableCell>Stage</TableCell>\r\n                        <TableCell />\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {myCalcs.map((calc) => (\r\n                         <TableRow key={calc.calculation_id}>\r\n                             <TableCell>{calc.calculation}</TableCell>\r\n                             <TableCell>{calc.JobNameShort}</TableCell>\r\n                             <TableCell>{calc.ProjectCode}</TableCell>\r\n                             <TableCell>{calc.stage}</TableCell>\r\n                             <TableCell><Button variant=\"contained\" onClick={() => completeCalc(calc)}>Complete Calc</Button></TableCell>\r\n                         </TableRow>\r\n                    ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    );\r\n}","import { makeStyles } from \"@material-ui/core\";\r\n\r\nexport default makeStyles({\r\n  loginScreen: {\r\n    margin: \"auto\",\r\n    marginTop: \"20%\",\r\n  },\r\n});\r\n","import React from \"react\"\r\nimport MicrosoftLogin from \"react-microsoft-login\";\r\n\r\n//Material UI Components\r\nimport Button from '@material-ui/core/Button';\r\n\r\n//Hooks\r\nimport useHooks from './hooks/use-hooks.js';\r\n\r\n//Project Components\r\nimport MyCalcs from '../my-calcs';\r\n\r\n//Styles\r\nimport useStyles from './main-hub-styles';\r\n\r\nexport default function MainHub() {\r\n    const {\r\n        handleNotification,\r\n        loggedIn,\r\n        authHandler,\r\n        userData\r\n    } = useHooks();\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n        {!loggedIn && <MicrosoftLogin clientId=\"2b4cf606-ac2c-4532-a7b0-483d7f2427cc\" authCallback={authHandler} className={classes.loginScreen} />}\r\n        {loggedIn && \r\n        <div>\r\n            <h1>Arup Hub</h1>\r\n            <Button variant=\"contained\" onClick={handleNotification}>Send me a Notification</Button>\r\n            <MyCalcs userData={userData} />\r\n        </div>\r\n        }\r\n        </div>\r\n    );\r\n}","import { useState, useEffect } from \"react\";\r\nimport { format, isThisSecond, isEqual } from \"date-fns\";\r\n\r\nexport default () => {\r\n  const [sendNotification, setSendNotification] = useState(false);\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const [userData, setUserData] = useState([]);\r\n\r\n  const authHandler = (err, data) => {\r\n    console.log(err, data);\r\n    if (data) {\r\n      setUserData(data);\r\n      setLoggedIn(true);\r\n    }\r\n  };\r\n\r\n  const handleNotification = () => {\r\n    Notification.requestPermission().then(() => {\r\n      var notification = new Notification(\r\n        \"You have 4 new calculations to complete, click to view\"\r\n      );\r\n      notification.onclick = function (event) {\r\n        event.preventDefault();\r\n        window.open(\r\n          \"https://bmtools.arup.com/calcs/mechanical/project/demo\",\r\n          \"_blank\"\r\n        );\r\n      };\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sendNotification) {\r\n      const timedNotification = () => {\r\n        console.log(\"timed notification\");\r\n      };\r\n      timedNotification();\r\n      handleNotification();\r\n      setSendNotification(false);\r\n    }\r\n  }, [sendNotification]);\r\n\r\n  return {\r\n    handleNotification,\r\n    loggedIn,\r\n    authHandler,\r\n    userData,\r\n  };\r\n};\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport MainHub from \"./main-hub\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainHub />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\"This web app is being served cache-first by a service \");\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: {\r\n      \"Service-Worker\": \"script\",\r\n    },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.register();\nreportWebVitals();\n"],"sourceRoot":""}